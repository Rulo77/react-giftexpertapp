{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifts.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setImputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGift","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GidGridItem","className","src","alt","GidGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","imagen","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAa,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,cAExB,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAXS,SAACC,GAChBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAI,OAAIP,GAAJ,mBAAkBO,OACpCN,EAAc,MAMlB,SAEF,uBACAO,KAAK,OACLC,MAAQT,EACRU,SAtBsB,SAACP,GAEtBF,EAAcE,EAAEQ,OAAOF,a,+BCRjBG,EAAO,uCAAE,WAAOC,GAAP,uBAAAC,EAAA,6DACZC,EADY,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEZG,EAFY,gBAIGA,EAAKC,OAJR,uBAIXC,EAJW,EAIXA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVxB,kBAcZM,GAdY,4CAAF,sDCaLO,EAZI,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAI5B,OACI,sBAAKc,UAAW,0CAAhB,UACG,qBAAKC,IAAMf,EAAMgB,IAAKN,IACtB,4BAAKA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAIrB,ECJwB,SAACA,GAC1B,MAAyBd,mBAAS,CAC7BqB,KAAK,GACLa,SAAS,IAFd,mBAAOC,EAAP,KAAcC,EAAd,KAeC,OAVAC,qBAAW,WACPxB,EAASC,GACJwB,MAAK,SAAAC,GACFH,EAAS,CACTf,KAAKkB,EACLL,SAAQ,SAGjB,CAACpB,IAEGqB,EDZuBK,CAAa1B,GAA/Ba,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAKpB,OACG,qCACA,qBAAIJ,UAAW,qCAAf,cAAuDhB,EAAvD,OAEEoB,GAAW,0CAEZ,qBAAKJ,UAAW,YAAhB,SAEMH,EAAOJ,KAAK,SAAAkB,GAAM,OAAK,cAAC,EAAD,eAEjBA,GADCA,EAAOhB,aEUbiB,EA3BK,WAGhB,MAAmC1C,mBAAS,CAAC,cAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAMF,OACK,qCACD,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGE,6BAEM4C,EAAWpB,KAAK,SAAAT,GAAQ,OAAG,cAAC,EAAD,CAASA,SAAWA,GACxCA,Y,MClBrB8B,IAASC,OAEL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.89995fba.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory= ({setCategories}) =>{\r\n\r\n    const [inputValue, setImputValue]= useState('');\r\n\r\n   const handleInputChange= (e)=>{\r\n       //console.log(e.target.value);\r\n       setImputValue(e.target.value)\r\n   }\r\n\r\n   \r\n   const handleSubmit= (e) =>{\r\n        e.preventDefault();\r\n       \r\n        if( inputValue.trim().length > 0){\r\n            setCategories(cats =>[inputValue,...cats]);\r\n            setImputValue('');\r\n\r\n        }\r\n        \r\n   }\r\n    return(\r\n        <form onSubmit={ handleSubmit }>\r\n    \r\n      <input \r\n      type=\"text\"\r\n      value={ inputValue }\r\n      onChange= { handleInputChange }\r\n      />\r\n        </ form>\r\n    );\r\n}\r\n\r\n\r\nAddCategory.propTypes= {\r\n    setCategories: PropTypes.func.isRequired\r\n}","\r\nexport const getGift= async (category)=>{\r\n    const url= `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=Mzr8iZB4IK04ILQiihnwYibOyngN4tHp`;\r\n    const resp= await fetch (url);\r\n\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n\r\n   return gifs;\r\n\r\n }","import React from 'react';\r\n\r\nconst GidGridItem= ({id, title, url}) => {\r\n \r\n    //console.log(id,title,url)\r\n\r\n    return (\r\n        <div className= 'card animate__animated animate__flipInX'>\r\n           <img src={ url } alt={title} />\r\n           <p>{ title }</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default GidGridItem;","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifts';\r\nimport GidGridItem from './GifGridItem';\r\n\r\nexport const GidGrid = ({category}) => {\r\n\r\n\r\n\r\n    const {data:images, loading}= useFetchGifs(category);\r\n\r\n    //console.log(data,loading);\r\n\r\n\r\n    return (\r\n       <>\r\n       <h3 className= \"animate__animated animate__flipInX\"> { category} </h3>\r\n        \r\n        {loading && <p>Loading..</p> }\r\n      \r\n        <div className= 'card-grid'>\r\n            {\r\n              images.map( imagen => (<GidGridItem \r\n                key={imagen.id}\r\n                {...imagen}\r\n                /> \r\n               ) )\r\n            }\r\n           \r\n        </div>\r\n        </>\r\n    )\r\n}","import { useEffect, useState } from \"react\"\r\nimport {getGift} from '../helpers/getGifs'\r\n\r\n\r\nexport const useFetchGifs = (category)=>{\r\n   const [state, setState]= useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( ()=> {\r\n        getGift( category )\r\n            .then(imgs =>{\r\n                setState({\r\n                data:imgs,\r\n                loading:false\r\n                })\r\n            })\r\n    }, [category]);\r\n\r\n    return state;\r\n}","import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport { GidGrid } from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp= ()=>{\r\n \r\n    \r\n    const [categories, setCategories]= useState(['one-punch']);\r\n    \r\n    // const handleAdd=()=>{\r\n    //    //setCategories([...categories, 'hunterXhunter']);\r\n    //     setCategories(cats=>[...cats, 'HunterXHunter']);\r\n    // }\r\n  return (    \r\n       <>\r\n      <h1>GifExpertApp</h1>\r\n      <AddCategory setCategories= { setCategories }  />\r\n      <hr />\r\n\r\n \r\n        <ol>\r\n            { \r\n              categories.map( category=> <GidGrid category= {category} \r\n                key={category}\r\n              />)\r\n            }\r\n        </ol>\r\n      </>\r\n  )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}